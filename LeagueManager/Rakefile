#
#
# Use ruby to build 
#
#
require 'csv'



task :compare do
  puts "compare"

  fssl = Hash.new{|h,k| h[k] = Hash.new{|h,k| h[k] = 0}}
  team = nil
  CSV.foreach("2023.csv", headers:true) do |r|
    
    r.to_h.each do |key,val|
      if key == "TEAM"
        team = val
      else
        fssl[team][key] = val.to_i
      end
    end
  end


  sh "grep -h SCORE output/*.txt > mine.csv"
  File.read("mine.csv").each_line do |l|

    if (l=~/SCORE:/) 
      l = l.gsub("SCORE:","")
      t1,t2,s1,s2,diff = l.split(",")
      real = fssl[t1][t2]
      print t1,", ", t2, ", ", real, ", ", diff.to_i, "\n"
    end
  end
  
end



Classes =  [
  "Athlete",
  "ENTRY",
  "MEET",
  "MTEVENT",
  "MTEVENTE",
  "RESULT",
  "TEAM",
  #"RELAY",
]


#
# Run from linux 
#    need to have ndb-tools installed
# 
task :schema do
  Classes.each do |table|
    puts table
    out = %x{mdb-schema ../2022.mdb -T #{table}}
    File.open( "schema/#{table}.schema.txt", "w") do |fh|
      fh.puts(out)
    end
  end
end


#
#
#
# Build DAO and model
#
#

task :classes do
  Classes.each do |table|
    readTable(File.read("schema/#{table}.schema.txt"))
  end
end


def readTable(schema)
  iter = schema.split("\n").each
  
  begin 
    while true
      s = iter.next
      if s =~ /CREATE TABLE/
        _,_,name = s.split(' ')
        name = name[1..-2].capitalize
        File.open("src/main/java/org/jytek/leaguemanager/view/Tm#{name}.java", "w") do |fh|
          puts fh.path
          fh.puts createClass(schema,name,iter,"Tm")
        end
      end
    end
  rescue StopIteration => e
  end
end



def createClass(schema, name, iter, prefix)

  clsName = prefix + name 
  out = []
  out << "package org.jytek.leaguemanager.view;\n"
  out << "import java.util.*;\n"  

  out << "/**" 
  schema.split("\n").each do |l|
    if (l =~ /^--/)
      next
    end
    if (l =~ /#/)
      next
    end
    out << " * #{l.strip}" 
  end
  out << " */"
  
  out << "public class #{clsName} {\n"

  out << "    public static String NAME = \"#{name}\";"

  out << "    private #{clsName}() {\n    }\n"
  
  
  
  
  columns = []
  while true
    s = iter.next.squish!
    if s =~ /^\(/
    elsif s =~ /\);/
      members = {}

      columns.each do |c|
        if c.strip =~ /#/
          next
        end
        name,type = c.split(" ",2)
        name = name[1..-2]
        memberName = getMemberName(name);
        if type =~ /Text/
          type = "String"
        else
          unless  MapTypes.include?(type)
            puts type
          end
          type = MapTypes[type]
        end
        

        members[name] = [memberName, type]
      end

      out << "    public static #{clsName} create(final com.healthmarketscience.jackcess.Row row){\n"
      
      var = clsName.downcase
      out << "       var obj = new #{clsName}();"
      members.each do |name,(mname, type)|
        sub = name.gsub("(","_").sub(")","")
        mname = mname.gsub("(","_").sub(")","")
        out << "        obj.#{mname.downcase} = (#{type}) row.get(#{clsName}.#{sub.upcase});"
      end
      out << "        return obj;"
      out << "    }"
      
      out << "\n"
      out << "    // "       
      out << "    // Column names"       
      out << "    //"       
      members.each do |name,(mname,_)|
        sub = name.gsub("(","_").sub(")","")
        out << "    public static final String #{sub.upcase} = \"#{name}\";"
      end

      out << "    // "       
      out << "    // members"
      out << "    //"       
      members.each do |name,(mname,type)|
        sub = mname.gsub("(","_").sub(")","")
        out << "    private #{type} #{sub.downcase} = null;";
    end
    
      out << "    //"       
      out << "    // getters"
      out << "    //"       
      
      members.each do |name,(mname,type)|
        sub = mname.gsub("(","_").sub(")","")
        out << "    public #{type} get#{sub[0].upcase}#{sub.downcase[1..-1]}() {";
        out << "        return #{sub.downcase};"
        out << "    }";
      end

      out << Extra[clsName]

      
      out << "}"

      out << "/* FXML "
      out << '<TableView fx:id=tv' + clsName + '" layoutX="16.0" layoutY="100.0" prefHeight="513.0" prefWidth="548.0">'
      out << '  <columns>'
      members.each do |name,(_, type)|
        sub = name.gsub("(","_").sub(")","")
        out << '    <TableColumn fx:id="tc' + clsName + sub + '" prefWidth="150.0" sortable="true" text="' + sub +'" />'
      end
      out <<   "</columns>"
      out << "</TableView>"
      
      out << "*/"

      out << "\n\n"
      out << "/* Controller "
      out << "@FXML"
      out << "private TableView<#{clsName}> tv#{clsName};"
      members.each do |name,(_,type)|
        out << "@FXML"
        out << "private TableColumn<#{clsName},#{type}> tc#{clsName}#{name};"
      end
      out << "*/"
      out << "\n\n"

      
      out << "/* Populate  Data "
      

      out << "\n\n"
      
      out << "for (Pair<TableColumn, String> pair : Arrays.asList("

      out << members.map{|name,(_,type)| "new Pair(tc#{name},\"#{name}\")"} * ",\n    "
      
      out << ")) {\n pair.getKey().setCellValueFactory(new PropertyValueFactory<>(pair.getValue()));  }"
      out << "*/"

      
      return out * "\n";
    elsif s =~ /\[/
      columns << s.gsub(" NOT NULL","").gsub(",","")
    end
  end
end


class String
  def squish!
    gsub!(/\A[[:space:]]+/, '')
    gsub!(/[[:space:]]+\z/, '')
    gsub!(/[[:space:]]+/, ' ')
    self
  end
end

MapTypes = {
  "Long Integer" => "Integer",
  "Integer" => "Short",
  "Byte"   => "Byte",
  "DateTime"   => "java.time.LocalDateTime",
  "Boolean"   => "Boolean",
  "Single"   => "Float",
  "Double"   => "Double",      
}


Extra = {
  "TmAthlete" => "
    public List<TmResult> getResults() {
        return results;
    }
    private List<TmResult> results = new ArrayList<>();
    
    public void add(TmResult r) {
        results.add(r);
    }
",
  "TmTeam" => "

    private List<TmAthlete> athletes = new ArrayList<>();

    private List<TmRelay> relays = new ArrayList<>();

    public List<TmAthlete> getAthletes() {
        return this.athletes;
    }
    public void add(TmAthlete ath){
        athletes.add(ath);
    }
    public void add(TmRelay relay){
        relays.add(relay);
    }

    public List<TmRelay> getRelays() {
        return this.relays;
    }
"
}


R = /(?:(?<=^| )|[_-])[A-Za-z][^ _-]*/

def to_camel_case(str)
  str.gsub(R) do |s|
    c1 = s[0]
    case c1
    when /[A-Za-z]/
      c1 + s[1..-1].downcase
    else
      s[1].upcase + s[2..-1].downcase
    end
  end
end





def getMemberName(name)

  out = name
  if (name == "Short")
    out = "short_"
  elsif (out =~ /_/)
    out = to_camel_case(name)
  end
  print name, " = ", out, "\n"
  out
end

