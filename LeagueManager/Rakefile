##############################
#
#
# Create Classes for Model, View, and Controller
#    
#
##############################


MVC = [
  ["athlete result",
   [24, 246, 70, 946], #layoutX, layoutY, prefHeight prefWidth
   [
     [100, "score",    "Integer"],
     [100, "place",    "Short"],
     [100, "points",   "Short"],
     [100, "age",      "Short"],
     [100, "stroke",   "String"],
     [100, "distance", "String"],     
     [100, "event",    "String"],
     [100, "MF",      "String"],                 
     [20,  "ir",       "String"],
     [75,  "meet",     "String"],
     [75,  "date",     "Date"],     
     [100, "team",    "String"],
   ]
  ],
  ["meet result",
   [24, 246, 70, 946], #layoutX, layoutY, prefHeight prefWidth
   [
     [100, "score",     "Integer"],
     [100, "place",     "Integer"],
     [100, "points",    "Integer"],            
     [90,  "athlete",   "String"],
     [90,  "team",      "String"],
     [100, "converted", "Integer"],
   ]
  ],
  
  ["mock meet result",
   [24, 246, 70, 946], #layoutX, layoutY, prefHeight prefWidth
   [
     [100, "score",    "Integer"],
     [100, "place",    "Integer"],
     [100, "points",   "Integer"],
     [90,  "athlete",  "String"],
     [90,  "team",     "String"],
     [100, "Meet",      "String"],
     [100, "date",     "Date"],
     [100, "converted", "Integer"],
     
   ]
  ]
]




#
#
# Use ruby to build 
#
#
require 'csv'

#
#
# Ruby Rake File
#
#

require_relative 'ruby/java.rb'
require_relative 'ruby/ruby.rb'
require_relative 'ruby/string.rb'



task :mvc do
  mvc(MVC)
end




#
# Define TableViews and Columns
#
#   TableName
#   config
#   Columns
#
PATH = "./src/main/java/org/jytek/leaguemanager/"
VIEW = PATH + "view/"
CONTROLLER = PATH + "controller/"
MODEL = "./src/main/resources/org/jytek/leaguemanager/"

def mvc(ins)
  # entity
  ins.each do |(tname, spec, columns)|

    cname = tname
    File.open(VIEW + tname.pascal_case + ".java", "w") do |fh|
      puts fh.path
      fh.puts(createView(tname, columns))
    end

    path = "./src/main/java/org/jytek/leaguemanager/controller/"
    File.open(path + tname.pascal_case + "Controller.java", "w") do |fh|
      puts fh.path
      table = ("tv " + tname).camel_case
      out = [
        "package org.jytek.leaguemanager.controller;
import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;
import javafx.util.Pair;
import org.jytek.leaguemanager.utilities.Util;
import org.jytek.leaguemanager.view.#{tname.pascal_case};
        
import java.net.URL;
import java.util.Arrays;
import java.util.ResourceBundle;
        
public class #{cname.pascal_case}Controller extends Application implements Initializable {",

        "    // ---------------------------",
        "    // Table #{table}",
        "",
        "    @FXML",
        "    private TableView<#{tname.pascal_case}> #{table};",
        columns.map do |width,name, type|
          name = name.gsub("&#10;", " ")
          tcname = ("tc " + tname + " " +name).camel_case
          "    @FXML\n    private TableColumn<#{cname.pascal_case}, #{type.java_type}> #{tcname};"
        end * "\n"
      ]
      out << "\n\n"
      out << "    @Override"
      out << "    public void start(Stage stage) throws Exception {"
      out << "    }"

      out << "    public void populateData(ObservableList<#{cname.pascal_case}> #{cname.camel_case}s) {"

      out << "        tv#{cname.pascal_case}.setItems(#{cname.camel_case}s);"
      out << "    }"
      out << ""
      out << "    @Override"
      out << "    public void initialize(URL url, ResourceBundle resourceBundle) {"
    
      columns.map{|(_,name,type)|
        out << "        Util.setPVF(tc#{tname.pascal_case}#{name.pascal_case},\"#{name.pascal_case}\");"
      }
      out << "   }"
      out << "}"
      fh.puts(out * "\n")
    end


    outf = MODEL + cname.dash_case + ".fxml"
    puts outf
    table_model = get_model_table(tname, columns)


    if (File.exists?(outf))
      iter = File.readlines(outf).each
      begin
        while iter
          if (iter.peek.strip.index("<TableView"))
            #puts table_model
            # skip until
            while iter.peek.index("</TableView") != 0
              iter.next
            end
            iter.next
          else
            iter.next
            puts iter.peek
          end
          puts iter.peek
          iter.next
        end
      rescue StopIteration
      end
      
      
      # just replace table view

    else
      File.open(outf, "w") do |fh|
        puts fh.path
        out = []
        out << "<?import javafx.scene.control.*?>"
        out << "<?import javafx.scene.layout.*?>"
        out << "<AnchorPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"864.0\" prefWidth=\"941.0\" xmlns=\"http://javafx.com/javafx/21\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.jytek.leaguemanager.controller.#{cname.pascal_case}Controller\">"
        out << table_model
        out << "</AnchorPane>"
        fh.puts out
      end

    end
    
  end
end


def get_model_table(tname, columns)
  out = []
  out << '  <TableView fx:id="tv' + tname.pascal_case + '" layoutX="16.0" layoutY="100.0" prefHeight="513.0" prefWidth="548.0">'
  out << '    <columns>'
  columns.each do |a|
    width,name,_ = a
    sub = name.gsub("(","_").sub(")","")
    out << '      <TableColumn fx:id="tc' + tname.pascal_case + sub.pascal_case  + '" prefWidth="' + width.to_s + '" sortable="true" text="' + sub +'" />'
        end
  out <<     "</columns>"
  out <<   "</TableView>"
  out * "\n"
end


task :compare do
  puts "compare"

  fssl = Hash.new{|h,k| h[k] = Hash.new{|h,k| h[k] = 0}}
  team = nil
  CSV.foreach("2023.csv", headers:true) do |r|
    
    r.to_h.each do |key,val|
      if key == "TEAM"
        team = val
      else
        fssl[team][key] = val.to_i
      end
    end
  end


  sh "grep -h SCORE output/*.txt > mine.csv"
  File.read("mine.csv").each_line do |l|

    if (l=~/SCORE:/) 
      l = l.gsub("SCORE:","")
      t1,t2,s1,s2,diff = l.split(",")
      real = fssl[t1][t2]
      print t1,", ", t2, ", ", real, ", ", diff.to_i, "\n"
    end
  end
  
end



Classes =  [
  "Athlete",
  "ENTRY",
  "MEET",
  "MTEVENT",
  "MTEVENTE",
  "RESULT",
  "TEAM",
  "RELAY",
]


#
# Need to have mdb-tools installed
# 
task :schema do
  Classes.each do |table|
    puts table
    out = %x{mdb-schema ../2022.mdb -T #{table}}
    File.open( "schema/#{table}.schema.txt", "w") do |fh|
      fh.puts(out)
    end
  end
end


#
#
#
# Build DAO and model
#
#

task :classes do
  Classes.each do |table|
    readTable(File.read("schema/#{table}.schema.txt"))
  end
end


def readTable(schema)
  iter = schema.split("\n").each
  
  begin 
    while true
      s = iter.next
      if s =~ /CREATE TABLE/
        _,_,name = s.split(' ')
        name = name[1..-2].capitalize
        
        File.open("src/main/java/org/jytek/leaguemanager/view/Tm#{name}.java", "w") do |fh|
          puts fh.path
          fh.puts create_class(schema,name,iter,"Tm")
        end

        File.open("src/main/java/org/jytek/leaguemanager/database/Tm#{name}DAO.java", "w") do |fh|
          puts fh.path
          fh.puts createDAO(schema,name,iter,"Tm")
        end

        
      end
    end
  rescue StopIteration => e
  end
end

def createDAO(schema, name, iter, prefix)
  out = []

  
  out << "package org.jytek.leaguemanager.database;"
  
  out << "import com.healthmarketscience.jackcess.Database;"
  out << "import com.healthmarketscience.jackcess.Row;"
  out << "import org.jytek.leaguemanager.view.#{prefix}#{name};"
  out << "import java.io.IOException;"
  out << "import java.util.HashMap;"
  out << "import java.util.Map;"


  cls = prefix + name
  out << %Q[

  public class #{cls}DAO {


    private #{cls}DAO()
    {

    }

    public static Map<Integer,#{cls}> get#{name}s(Database db) throws IOException {

        var map = new HashMap<Integer, #{cls}>();
        for (final Row row : db.getTable(#{prefix}#{name}.NAME)) {
            final var obj = #{prefix}#{name}.create(row);
            map.put(obj.get#{name}(), obj);
        }
        return map;
    }
}

  ]
  out * "\n"
end

def create_class(schema, name, iter, prefix)

  clsName = prefix + name 
  out = []
  out << "package org.jytek.leaguemanager.view;\n"
  out << "import java.util.*;\n"  

  out << "/**" 
  schema.split("\n").each do |l|
    if (l =~ /^--/)
      next
    end
    if (l =~ /#/)
      next
    end
    out << " * #{l.strip}" 
  end
  out << " */"
  
  out << "public class #{clsName} {\n"

  out << "    public static String NAME = \"#{name}\";"

  out << "    private #{clsName}() {\n    }\n"
  
  
  
  
  columns = []
  while true
    s = iter.next.squish!
    if s =~ /^\(/
    elsif s =~ /\);/
      members = {}

      columns.each do |c|
        if c.strip =~ /#/
          next
        end
        name,type = c.split(" ",2)
        name = name[1..-2]
        memberName = getMemberName(name);
        if type =~ /Text/
          type = "String"
        else
          unless  MapTypes.include?(type)
            puts type
          end
          type = MapTypes[type]
        end
        

        members[name] = [memberName, type]
      end

      out << "    public static #{clsName} create(final com.healthmarketscience.jackcess.Row row){\n"
      
      var = clsName.downcase
      out << "       var obj = new #{clsName}();"
      members.each do |name,(mname, type)|
        sub = name.gsub("(","_").sub(")","")
        mname = mname.gsub("(","_").sub(")","")
        out << "        obj.#{mname.downcase} = (#{type}) row.get(#{clsName}.#{sub.upcase});"
      end
      out << "        return obj;"
      out << "    }"
      
      out << "\n"
      out << "    // "       
      out << "    // Column names"       
      out << "    //"       
      members.each do |name,(mname,_)|
        sub = name.gsub("(","_").sub(")","")
        out << "    public static final String #{sub.upcase} = \"#{name}\";"
      end

      out << "    // "       
      out << "    // members"
      out << "    //"       
      members.each do |name,(mname,type)|
        sub = mname.gsub("(","_").sub(")","")
        out << "    private #{type} #{sub.downcase} = null;";
    end
    
      out << "    //"       
      out << "    // getters"
      out << "    //"       
      
      members.each do |name,(mname,type)|
        sub = mname.gsub("(","_").sub(")","")
        out << "    public #{type} get#{sub[0].upcase}#{sub.downcase[1..-1]}() {";
        out << "        return #{sub.downcase};"
        out << "    }";
      end

      out << "}"

      out << "/* FXML "
      out << '<TableView fx:id=tv' + clsName + '" layoutX="16.0" layoutY="100.0" prefHeight="513.0" prefWidth="548.0">'
      out << '  <columns>'
      members.each do |name,(_, type)|
        sub = name.gsub("(","_").sub(")","")
        out << '    <TableColumn fx:id="tc' + clsName + sub + '" prefWidth="150.0" sortable="true" text="' + sub +'" />'
      end
      out <<   "</columns>"
      out << "</TableView>"
      
      out << "*/"

      out << "\n\n"
      out << "/* Controller "
      out << "@FXML"
      out << "private TableView<#{clsName}> tv#{clsName};"
      members.each do |name,(_,type)|
        out << "@FXML"
        out << "private TableColumn<#{clsName},#{type}> tc#{clsName}#{name};"
      end
      out << "*/"
      out << "\n\n"

      
      out << "/* Populate  Data "
      

      out << "\n\n"
      
      out << "for (Pair<TableColumn, String> pair : Arrays.asList("

      out << members.map{|name,(_,type)| "new Pair(tc#{name},\"#{name}\")"} * ",\n    "
      
      out << ")) {\n pair.getKey().setCellValueFactory(new PropertyValueFactory<>(pair.getValue()));  }"
      out << "*/"

      
      return out * "\n";
    elsif s =~ /\[/
      columns << s.gsub(" NOT NULL","").gsub(",","")
    end
  end
end


class String
  def squish!
    gsub!(/\A[[:space:]]+/, '')
    gsub!(/[[:space:]]+\z/, '')
    gsub!(/[[:space:]]+/, ' ')
    self
  end
end

MapTypes = {
  "Long Integer" => "Integer",
  "Integer" => "Short",
  "Byte"   => "Byte",
  "DateTime"   => "java.time.LocalDateTime",
  "Boolean"   => "Boolean",
  "Single"   => "Float",
  "Double"   => "Double",      
}



R = /(?:(?<=^| )|[_-])[A-Za-z][^ _-]*/

def to_camel_case(str)
  str.gsub(R) do |s|
    c1 = s[0]
    case c1
    when /[A-Za-z]/
      c1 + s[1..-1].downcase
    else
      s[1].upcase + s[2..-1].downcase
    end
  end
end





def getMemberName(name)

  out = name
  if (name == "Short")
    out = "short_"
  elsif (out =~ /_/)
    out = to_camel_case(name)
  end
  print name, " = ", out, "\n"
  out
end



def createView(tname,columns)
  cname = (tname)
    puts columns.size
    fields = columns.map do |width,name, type|
      [name.gsub("&#10;", " "), type]
    end
    java_class([cname, fields])
end
  





